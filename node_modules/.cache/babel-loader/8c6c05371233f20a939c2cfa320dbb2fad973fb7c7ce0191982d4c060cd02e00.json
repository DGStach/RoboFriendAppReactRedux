{"ast":null,"code":"import printBuffer from './core';\nimport { timer } from './helpers';\nimport defaults from './defaults';\n/* eslint max-len: [\"error\", 110, { \"ignoreComments\": true }] */\n/**\n * Creates logger with following options\n *\n * @namespace\n * @param {object} options - options for logger\n * @param {string | function | object} options.level - console[level]\n * @param {boolean} options.duration - print duration of each action?\n * @param {boolean} options.timestamp - print timestamp with each action?\n * @param {object} options.colors - custom colors\n * @param {object} options.logger - implementation of the `console` API\n * @param {boolean} options.logErrors - should errors in action execution be caught, logged, and re-thrown?\n * @param {boolean} options.collapsed - is group collapsed?\n * @param {boolean} options.predicate - condition which resolves logger behavior\n * @param {function} options.stateTransformer - transform state before print\n * @param {function} options.actionTransformer - transform action before print\n * @param {function} options.errorTransformer - transform error before print\n *\n * @returns {function} logger middleware\n */\nfunction createLogger() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var loggerOptions = Object.assign({}, defaults, options);\n  var logger = loggerOptions.logger,\n    stateTransformer = loggerOptions.stateTransformer,\n    errorTransformer = loggerOptions.errorTransformer,\n    predicate = loggerOptions.predicate,\n    logErrors = loggerOptions.logErrors,\n    diffPredicate = loggerOptions.diffPredicate;\n\n  // Return if 'console' object is not defined\n  if (typeof logger === 'undefined') {\n    return function () {\n      return function (next) {\n        return function (action) {\n          return next(action);\n        };\n      };\n    };\n  }\n\n  // Detect if 'createLogger' was passed directly to 'applyMiddleware'.\n  if (options.getState && options.dispatch) {\n    // eslint-disable-next-line no-console\n    console.error(\"[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\\n// Logger with default options\\nimport { logger } from 'redux-logger'\\nconst store = createStore(\\n  reducer,\\n  applyMiddleware(logger)\\n)\\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\\nimport createLogger from 'redux-logger'\\nconst logger = createLogger({\\n  // ...options\\n});\\nconst store = createStore(\\n  reducer,\\n  applyMiddleware(logger)\\n)\\n\");\n    return function () {\n      return function (next) {\n        return function (action) {\n          return next(action);\n        };\n      };\n    };\n  }\n  var logBuffer = [];\n  return function (_ref) {\n    var getState = _ref.getState;\n    return function (next) {\n      return function (action) {\n        // Exit early if predicate function returns 'false'\n        if (typeof predicate === 'function' && !predicate(getState, action)) {\n          return next(action);\n        }\n        var logEntry = {};\n        logBuffer.push(logEntry);\n        logEntry.started = timer.now();\n        logEntry.startedTime = new Date();\n        logEntry.prevState = stateTransformer(getState());\n        logEntry.action = action;\n        var returnedValue;\n        if (logErrors) {\n          try {\n            returnedValue = next(action);\n          } catch (e) {\n            logEntry.error = errorTransformer(e);\n          }\n        } else {\n          returnedValue = next(action);\n        }\n        logEntry.took = timer.now() - logEntry.started;\n        logEntry.nextState = stateTransformer(getState());\n        var diff = loggerOptions.diff && typeof diffPredicate === 'function' ? diffPredicate(getState, action) : loggerOptions.diff;\n        printBuffer(logBuffer, Object.assign({}, loggerOptions, {\n          diff: diff\n        }));\n        logBuffer.length = 0;\n        if (logEntry.error) throw logEntry.error;\n        return returnedValue;\n      };\n    };\n  };\n}\n\n// eslint-disable-next-line consistent-return\nvar defaultLogger = function defaultLogger() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    dispatch = _ref2.dispatch,\n    getState = _ref2.getState;\n  if (typeof dispatch === 'function' || typeof getState === 'function') {\n    return createLogger()({\n      dispatch: dispatch,\n      getState: getState\n    });\n  }\n  // eslint-disable-next-line no-console\n  console.error(\"\\n[redux-logger v3] BREAKING CHANGE\\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\\n[redux-logger v3] Change\\n[redux-logger v3] import createLogger from 'redux-logger'\\n[redux-logger v3] to\\n[redux-logger v3] import { createLogger } from 'redux-logger'\\n\");\n};\nexport { defaults, createLogger, defaultLogger as logger };\nexport default defaultLogger;","map":{"version":3,"names":["printBuffer","timer","defaults","createLogger","options","arguments","length","undefined","loggerOptions","Object","assign","logger","stateTransformer","errorTransformer","predicate","logErrors","diffPredicate","next","action","getState","dispatch","console","error","logBuffer","_ref","logEntry","push","started","now","startedTime","Date","prevState","returnedValue","e","took","nextState","diff","defaultLogger","_ref2"],"sources":["/Users/dagmara/WebstormProjects/roboFriendReactApp/node_modules/redux-logger/src/index.js"],"sourcesContent":["import printBuffer from './core';\nimport { timer } from './helpers';\nimport defaults from './defaults';\n/* eslint max-len: [\"error\", 110, { \"ignoreComments\": true }] */\n/**\n * Creates logger with following options\n *\n * @namespace\n * @param {object} options - options for logger\n * @param {string | function | object} options.level - console[level]\n * @param {boolean} options.duration - print duration of each action?\n * @param {boolean} options.timestamp - print timestamp with each action?\n * @param {object} options.colors - custom colors\n * @param {object} options.logger - implementation of the `console` API\n * @param {boolean} options.logErrors - should errors in action execution be caught, logged, and re-thrown?\n * @param {boolean} options.collapsed - is group collapsed?\n * @param {boolean} options.predicate - condition which resolves logger behavior\n * @param {function} options.stateTransformer - transform state before print\n * @param {function} options.actionTransformer - transform action before print\n * @param {function} options.errorTransformer - transform error before print\n *\n * @returns {function} logger middleware\n */\nfunction createLogger(options = {}) {\n  const loggerOptions = Object.assign({}, defaults, options);\n\n  const {\n    logger,\n    stateTransformer,\n    errorTransformer,\n    predicate,\n    logErrors,\n    diffPredicate,\n  } = loggerOptions;\n\n  // Return if 'console' object is not defined\n  if (typeof logger === 'undefined') {\n    return () => next => action => next(action);\n  }\n\n  // Detect if 'createLogger' was passed directly to 'applyMiddleware'.\n  if (options.getState && options.dispatch) {\n    // eslint-disable-next-line no-console\n    console.error(`[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n`);\n\n    return () => next => action => next(action);\n  }\n\n  const logBuffer = [];\n\n  return ({ getState }) => next => (action) => {\n    // Exit early if predicate function returns 'false'\n    if (typeof predicate === 'function' && !predicate(getState, action)) {\n      return next(action);\n    }\n\n    const logEntry = {};\n\n    logBuffer.push(logEntry);\n\n    logEntry.started = timer.now();\n    logEntry.startedTime = new Date();\n    logEntry.prevState = stateTransformer(getState());\n    logEntry.action = action;\n\n    let returnedValue;\n    if (logErrors) {\n      try {\n        returnedValue = next(action);\n      } catch (e) {\n        logEntry.error = errorTransformer(e);\n      }\n    } else {\n      returnedValue = next(action);\n    }\n\n    logEntry.took = timer.now() - logEntry.started;\n    logEntry.nextState = stateTransformer(getState());\n\n    const diff = loggerOptions.diff && typeof diffPredicate === 'function'\n      ? diffPredicate(getState, action)\n      : loggerOptions.diff;\n\n    printBuffer(logBuffer, Object.assign({}, loggerOptions, { diff }));\n    logBuffer.length = 0;\n\n    if (logEntry.error) throw logEntry.error;\n    return returnedValue;\n  };\n}\n\n// eslint-disable-next-line consistent-return\nconst defaultLogger = ({ dispatch, getState } = {}) => {\n  if (typeof dispatch === 'function' || typeof getState === 'function') {\n    return createLogger()({ dispatch, getState });\n  }\n  // eslint-disable-next-line no-console\n  console.error(`\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n`);\n};\n\nexport { defaults, createLogger, defaultLogger as logger };\n\nexport default defaultLogger;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}